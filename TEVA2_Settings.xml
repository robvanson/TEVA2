<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="xhtml-default.css" type="text/css" media="screen, aural, print" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN"
    "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" >
<head>
<link rel="shortcut icon" href="TEVA.png" />
<link rel="icon" sizes="192x192" href="TEVA.png" />
<link rel="manifest" href="manifest.json" />
<meta name="viewport" content="width=device-width" />
<meta name="mobile-web-app-capable" content="yes" />
<meta http-equiv="Content-Language" content="en" />
<title lang="en" xml:lang="en" dir="ltr">Settings - TEVA</title>
<style>
body {
	background-image: url("Background.png");
	background-color: rgb(250,250,250);
    background-repeat: no-repeat;
    background-position: center center;
    background-size: 50%;
    background-attachment: fixed;}
h1 {
	text-align: center;
	}
button {
		position: fixed;
		overflow: hidden;
		text-overflow: clip clip;
		width:17%;
		height:15%;
		cursor:pointer; /*forces the cursor to change to a hand when the button is hovered*/
		text-align:center;
		font: bold 3vmin "Helvetica";
		background-color: rgb(220,220,220);
		
		-webkit-box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		-moz-box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		
		/*give the corners a small curve*/
		-moz-border-radius: 7px;
		-webkit-border-radius: 7px;
		border-radius: 7px;
		}

</style>

<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />

<script type="text/javascript" src="internationalization_tables.js" ></script>   
<script type="text/javascript" src="audioProcessing.js" ></script>   
<script type="text/javascript" src="jszip.min.js" defer="true" ></script> 
</head>
<body onfocus="load_TEVA_settings (); " onblur="store_TEVA_settings ();" onunload="store_TEVA_settings (); localStorage.removeItem('TEVA_settingsWindow'); if(creditsWindow)creditsWindow.close(); " >
<!--
TEVA 2
Copyright (C) 2016 R.J.J.H. van Son (r.j.j.h.vanson@gmail.com)

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You can find a copy of the GNU General Public License at
http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
-->
	<div id='headertitle' style='position: center; font-size: 3vmin; '>
		<h2 style='text-align: center' id="title">
		TEVA 2 <br />
		TE Voice Analysis Tool <br />
		version 2
		</h2>
	</div>
	<div style="position: fixed; color: black; bottom: 70%; left: 5%; height: 8%; width: 17%; font: 'Helvetica'; font-size: 4vmin; text-align: center " id="LanguageCaption">---</div>	
	<select id="Language" style="position: fixed; color: black; bottom: 65%; left: 5%; height: 8%; width: 17%; font: 'Helvetica'; font-size: 3vmin ; background-color: rgb(220,220,220); " onchange="teva_settings.language = change_configLanguage(); store_TEVA_settings (); " >
		<option value="---" ><span id="LanguageCaption2" title="" >---</span></option>
	</select> 

	<div style="position: fixed; color: black; bottom: 70%; left: 25%; height: 8%; width: 15%; font-size: 4vmin; text-align: center; " id="LocalFrequency" title="">
		<span id="FrequencyCaption" style="vertical-align: middle; " >---</span><br /><br />
		<select id="Frequency"  style="font-size: 3vmin; vertical-align: middle; background-color: rgb(220,220,220);" onchange="teva_settings.frequency = getFrequency(); store_TEVA_settings (); ">
		<option value="---" ><span id="FrequencyCaption2" title="" >---</span></option>
		</select>
	</div>
	
	<div style="position: fixed; color: black; bottom: 70%; left: 40%; height: 8%; width: 15%; font-size: 4vmin; text-align: center; " id="LocalRecordingTime" title="">
		<span id="RecordingTimeCaption" style="vertical-align: middle; " >---</span><br /><br />
		<select id="RecordingTime"  style="font-size: 3vmin; vertical-align: middle; background-color: rgb(220,220,220);" onchange="teva_settings.recSecs = getRecordingTime(); store_TEVA_settings (); ">
			<option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="10">10</option><option value="15">15</option><option value="20">20</option>
		</select>
		<span id="RecordingTimePost" style="vertical-align: middle; " >---</span> 
	</div>


	<div title=""><button type="button" style="color: black; bottom: 62%; left: 85%; height: 14%; width: 10%" id="CreditsButton" onclick="creditsWindow = window.open('TEVA2_Credits.xml', '_blank');" ><span id="Credits" >---</span></button></div>

	<a href="" id="HiddenDownloadLink" name="Download" style="display:none" title="Download" ></a>
	<input type="file" id="HiddenImportAudio" name="ImportAudio" style="display:none" onchange='importAudio (this.files); this.value="";' title="OpenWord" />
	<div title=""><button type="button" style="color: black; bottom: 5%; right: 33%; height: 8%; width: 8% " id="LocalImportAudio" ><span id="ImportAudio" style="font-size: 2vmin;" >Import</span></button></div>
	<div title=""><button type="button" style="color: black; bottom: 5%; right: 23%; height: 8%; width: 8% " id="ExportAudioButton" ><span id="ExportAudio" style="font-size: 2vmin;" >Export</span></button></div>
	
	<div style="position: fixed; color: black; bottom: 10%; right: 5%; height: 8%; width: 17%; font: 'Helvetica'; font-size: 4vmin; text-align: center " id="AudioNameCaption">---</div>	
	<select id="AudioName" style="position: fixed; color: black; bottom: 5%; right: 5%; height: 8%; width: 17%; font: 'Helvetica'; font-size: 3vmin; background-color: rgb(220,220,220); " onchange="changeCollection(this.selectedIndex); store_TEVA_settings (); " >
		<option value="NewCollection" ><span id="NewCollection" title="" >New</span></option>
	</select> 

    <script type="text/javascript">
	//<![CDATA[
	// Install the service worker for offline use
	if ('serviceWorker' in navigator) {
	  navigator.serviceWorker.register('sw.js').then(function(registration) {
	    // Registration was successful
	    console.log('ServiceWorker registration successful with scope: ',    registration.scope);
	  }).catch(function(err) {
	    // registration failed :(
	    console.log('ServiceWorker registration failed: ', err);
	  });
	}
	
	// Get DOM elements
	var mainWindow = localStorage.TEVA_mainWindow;
	var creditsWindow;
	
	var localRecordingTime = document.getElementById('RecordingTime');
	var localFrequency = document.getElementById('Frequency');

	var hiddenDownloadLink = document.getElementById('HiddenDownloadLink');
	var exportAudioButton = document.getElementById('ExportAudioButton');
	var openAudioButton = document.getElementById('LocalOpenAudio');
	var hiddenImportAudio = document.getElementById('HiddenImportAudio');
	var importAudioButton = document.getElementById('LocalImportAudio');
	importAudioButton.onclick = function () {
	    document.getElementById('HiddenImportAudio').click();
	};
	
	// Global settings
	var teva_settings = {
		settingsRead: false,
		recSecs: 4,
		language: "",
		display: "Sound",
		frequency: 2,
		audioDatabaseName: "TEVA audio",
		currentCollection: "TEVA",
	};
	
	// Store settings
	function store_TEVA_settings () {
		teva_settings.settingsRead = true;
		for (x in teva_settings) {
			localStorage["TEVA_"+x] = JSON.stringify(teva_settings[x]);
		};
	};
		
	function load_TEVA_settings () {
		for (x in teva_settings) {
			if (localStorage["TEVA_"+x]) teva_settings[x] = JSON.parse(localStorage["TEVA_"+x]);
		};
		
		set_configLanguage (teva_settings.language);
		setRecordingTime (teva_settings.recSecs);
		setFrequency (teva_settings.frequency);
		audioDatabaseName = teva_settings.audioDatabaseName;
		add_collections_names_to_select ();

		teva_settings.settingsRead = true;
	};
	
	// Initialize to stored settings
	load_TEVA_settings ();
	
	// Set language (make that selectable)
	if (!teva_settings.language) {
		teva_settings.language = (userLanguage) ? userLanguage : "EN";
	};
	set_configLanguage (teva_settings.language);

	// Recording time
	function getRecordingTime () {
		var index = document.getElementById("RecordingTime").selectedIndex;
		var value = document.getElementById("RecordingTime").options[index].value;
		if (index < 0) value = 3;
		return value;
	}
	
	function setRecordingTime (value) {
		for(var x = 0; x < document.getElementById("RecordingTime").options.length; ++ x) {
			if (document.getElementById("RecordingTime").options[x].value == value) {
				document.getElementById("RecordingTime").selectedIndex = x;
			};
		};
	};
	
	// Frequency
	function getFrequency () {
		var index = document.getElementById("Frequency").selectedIndex;
		var value = document.getElementById("Frequency").options[index].value;
		if (index <= 0) value = "2";
		value = value.replace(/[^0-9]/, "");
		return value*1;
	}
	
	function setFrequency (value) {
		var valueTxt = value+"k";
		for(var x = 0; x < document.getElementById("Frequency").options.length; ++x) {
			if (document.getElementById("Frequency").options[x].value == valueTxt) {
				document.getElementById("Frequency").selectedIndex = x;
			};
		};
	};


	// Construct a list of Collections
	function changeCollection(index) {
		var selector = document.getElementById('AudioName');
		var value = selector.options[index].value;
		if (index == 0) {
			var promptText = config_tables[teva_settings.language]["NewCollection"][1];
			var collectionName = prompt(promptText, teva_settings.currentCollection);
			if (collectionName && collectionName.length > 0) teva_settings.currentCollection = collectionName;
		} else {
			teva_settings.currentCollection = value;
		};
		getCurrentMetaData (teva_settings.currentCollection);
	};
		
	function addCollectionsToSelect (records) {
		var collectionList = [];
		if(teva_settings.currentCollection && teva_settings.currentCollection.length > 0) collectionList.push(teva_settings.currentCollection);
		for (var i = 0; i<records.length; ++ i) {
			var collection = records[i].collection;
			if (collectionList.indexOf(collection) < 0) collectionList.push(collection);
		};
		collectionList.sort();

		// First, remove old entries
		var selector = document.getElementById('AudioName');
		var numOptions = selector.options.length
		for(var i = numOptions - 1; i > 0; --i) {
			selector.remove(i);
		};
		// Add new entries
		var selectedIndex = 1;
		for(var i=0; i < collectionList.length; ++i) {
			var lastOption = selector.options.length - 1;
			var collectionTitle = collectionList[i];
			var newOption = selector.options[0].cloneNode(true);
			newOption.value = collectionTitle;
			newOption.text = collectionTitle;
			selector.add(newOption);
			if (collectionTitle == teva_settings.currentCollection) selectedIndex = selector.options.length - 1;
		};
		selector.selectedIndex = selectedIndex;
	};
	
	function add_collections_names_to_select () {
		// Read localStorage
		teva_settings.currentCollection = JSON.parse(localStorage.TEVA_currentCollection);
		// Get the names of the collections
		getAllRecords (undefined, addCollectionsToSelect);
	};
	
	// Export audio
	exportAudioButton.onclick = function (){
		if (hiddenDownloadLink.href != "") URL.revokeObjectURL(hiddenDownloadLink.href);
		getAllRecords (teva_settings.currentCollection, zipAudio);
	};
	
	var zipAudio = function (records) {
		var zip = new JSZip();
		// Create a file listing (also to force the whole path into the zip archive)
		var text = "";
		for (var i = 0; i<records.length; ++ i) {
			var path = records[i].map.length > 0 ? records[i].collection+"/"+records[i].map+"/"+records[i].name : records[i].collection+"/"+records[i].name;
			text += path+"\t"+records[i].audio.size+"\t"+records[i].date+"\n";
		};
		zip.file("README.txt", text, {text: true});
		
		for(var i=0; i <  records.length; ++i) {
			if (records[i].collection == teva_settings.currentCollection) {
				var path = records[i].map.length > 0 ? records[i].collection+"/"+records[i].map+"/"+records[i].name : records[i].collection+"/"+records[i].name;
				var filename = path;
				var blob = records[i].audio;
				zip.file(filename, blob, {binary: true});
			};
		};
		zip.generateAsync({type:"blob"})
		.then(function(content) {
	        hiddenDownloadLink.download = teva_settings.currentCollection+".zip";
	        hiddenDownloadLink.href = URL.createObjectURL(content);
	        hiddenDownloadLink.click();
		});		
	};	
	
	// Import audio
	function importAudio (files) {
		var zipReader = new FileReader();
		zipReader.onload = function(){
			var zip = new JSZip();
			zip.loadAsync(zipReader.result).then(unZipAudio);
		};
		zipReader.onerror = function(err) {
			console.log("Open zip file",err);
		};
		zipReader.readAsArrayBuffer(files[0]);
	};

	var unZipAudio = function (zip) {
		var fileList = zip.folder("\/$").files;
		var defaultCollection = Object.getOwnPropertyNames(fileList).find(function(name){return name.match(/^[^\/]+\/$/g)});
		defaultCollection = defaultCollection.replace(/\/$/g, "");
		
		// Ask whether to override the collection of the import.
		var collectionName = defaultCollection;
		var promptText = config_tables[teva_settings.language]["NewCollection"][1];
		var newCollectionName = prompt(promptText, defaultCollection);
		if (newCollectionName && newCollectionName.length > 0 && newCollectionName != defaultCollection) collectionName = newCollectionName;
		// Set new current collection
		teva_settings.currentCollection = collectionName;
		localStorage.TEVA_currentCollection = JSON.stringify(teva_settings.currentCollection);
			
		zip.forEach(function (relativePath, file){
			if(relativePath.match(/\.(wav|flac|mp3|spx|ogg|tsv)$/ig)) {
				var collection = collectionName;
				var map = "";
				var name = "Audio.wav";
				var path = relativePath.split("/");
				name = path[path.length - 1];
				if (path.length > 2) {
					map = path[path.length - 2];
					origCollection = path[path.length - 3];
				} else if (path.length == 2) {
					origCollection = path[path.length - 2];
				};
				// Change the name of hte TSV file
				if (origCollection != collection && name == origCollection+".tsv") name = collection+".tsv";
				
				var type = mimeTypes[name.match(/[^\.]+$/g)[0]];
				zip.file(relativePath).async("arraybuffer").then(function (data) {	
					var blob = new Blob([data], {type : type});
					addAudioBlob(collection, map, name, blob);
				}, function(event){console.log("Error", event)});
			};
		});
	};
	
	//]]>	
	</script>

 
</body>
</html>
