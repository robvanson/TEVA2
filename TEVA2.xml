<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="xhtml-default.css" type="text/css" media="screen, aural, print" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN"
    "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" manifest="TEVA2.appcache">
<head manifest="TEVA2.appcache">
<link rel="shortcut icon" href="TEVA.png" />
<link rel="manifest" href="manifest.json" />
<link rel="icon" sizes="192x192" href="TEVA.png" />
<meta http-equiv="Content-Language" content="en" />
<title lang="en" xml:lang="en" dir="ltr">TEVA 2</title>
<style>
body {
	background-image: url("Background.png");
	background-color: rgb(250,250,250);
    background-repeat: no-repeat;
    background-position: center center;
    background-size: 50%;
    background-attachment: fixed;}
h1 {
	text-align: center;
	}
button {
		position: fixed;
		overflow: hidden;
		text-overflow: clip clip;
		width:17%;
		height:15%;
		cursor:pointer; /*forces the cursor to change to a hand when the button is hovered*/
		text-align:center;
		font: bold 3.5vmin "Helvetica";
		background-color: rgb(220,220,220);
		
		-webkit-box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		-moz-box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		
		/*give the corners a small curve*/
		-moz-border-radius: 7px;
		-webkit-border-radius: 7px;
		border-radius: 7px;
		}
	
</style>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
<script type="text/javascript" src="internationalization_tables.js" ></script>   
<script type="text/javascript" src="audioProcessing.js" ></script>   
<script type="text/javascript" src="plotting.js" ></script>   
<script type="text/javascript" src="fft.js/lib/complex.js" ></script>   
<script type="text/javascript" src="fft.js/lib/real.js" ></script>   
<script type="text/javascript" src="RecordRTC.min.js" defer="true" ></script>
</head>
<body  onload="if(window.speechSynthesis)window.speechSynthesis.getVoices();" onfocus="load_TEVA_settings ();" onblur="store_TEVA_settings ();" onunload="store_TEVA_settings (); if(settingsWindow)settingsWindow.close(); " >
	<div style="color: gray; position: fixed; top: 5%; left: 2%; font-size: 15vmin; text-align: center; " id="RecordingLight">&#9679;</div>
	<div id="waveform" style="position: fixed; top: 5%; left: 20%; width: 60%; height: 60% " ></div>
	
	<canvas id="DrawingArea" width="1000" height="1000" style="position: fixed; top: 5%; left: 7.5%; width: 77.5%; height: 80%; "></canvas> 
	
	<button type="button" style="color: gray; bottom: 2%; left: 32%" id="RecordButton" disabled="true" ><span style="font-size: 100%; ">&#9679;<br /><span id="Record">Record</span></span></button>
	<button type="button" style="color: gray; bottom: 2%; left: 51%" id="PlayButton" disabled="true" ><span style="font-size: 100%">&#9658;<br /><span id="Play">Play</span></span></button>

	<button type="button" style="color: black; bottom: 84%; right: 2%; height: 10%; width: 12%" id="Settings" ><span style="font-size: 100%">&#8594; <span id="Config" >Settings</span></span></button>

	<button type="button" style="color: red; bottom: 72%; right: 2%; height: 10%; width: 12%" id="Draw_SoundButton" ><span style="font-size: 100%"><span id="Draw_Sound" >Sound</span></span></button>
	<button type="button" style="color: black; bottom: 61%; right: 2%; height: 10%; width: 12%" id="Draw_PitchButton" ><span style="font-size: 100%"><span id="Draw_Pitch" >Pitch</span></span></button>
	<button type="button" style="color: black; bottom: 50%; right: 2%; height: 10%; width: 12%" id="Draw_SpectrogramButton" ><span style="font-size: 100%"><span id="Draw_Spectrogram" >Spectrogram</span></span></button>
	<button type="button" style="color: black; bottom: 39%; right: 2%; height: 10%; width: 12%" id="Draw_LtasButton" ><span style="font-size: 100%"><span id="Draw_Ltas" >Ltas</span></span></button>
	<button type="button" style="color: black; bottom: 28%; right: 2%; height: 10%; width: 12%" id="Draw_IntensityButton" ><span style="font-size: 100%"><span id="Draw_Intensity" >Intensity</span></span></button>

    <script type="text/javascript">
	//<![CDATA[
	// Set DOM parameters
	var settingsWindow;
	var audioContext = new AudioContext();
	var recordedSource = audioContext.createBufferSource(); // creates a sound source
  
	var recordingLight = document.getElementById('RecordingLight');
	var settingsButton = document.getElementById('Settings');
	var record = document.getElementById('RecordButton');
	var play = document.getElementById('PlayButton');
	var stopRecording, playSound;

	/*
	 * Global variables from audioProcessing
	 * 
	 * var recordedBlob, recordedBlobURL;
	 * var recordedArray, currentAudioWindow;
	 * var recordedSampleRate, recordedDuration;
	 *
	 */
	
	// Buttons
	var draw_SoundButton = document.getElementById('Draw_SoundButton');
	var draw_PitchButton = document.getElementById('Draw_PitchButton');
	var draw_SpectrogramButton = document.getElementById('Draw_SpectrogramButton');
	var draw_LtasButton = document.getElementById('Draw_LtasButton');
	var draw_IntensityButton = document.getElementById('Draw_IntensityButton');
	
	function unsetDrawButtons () {
		var buttonList = ['Draw_SoundButton', 'Draw_PitchButton', 'Draw_SpectrogramButton', 'Draw_LtasButton', 'Draw_IntensityButton'];
		for(var b in buttonList) {
			var button = document.getElementById(buttonList[b]);
			if (button) button.style.color = "black";
		};
	};
	
	function setDrawButtons ( button ) {
		unsetDrawButtons ();
		button.style.color = "red";
		teva_settings.display = button.id .replace(/^[^_]+_([a-zA-Z0-9]+)Button$/, "$1");
		
		drawSignal (teva_settings.display);
	};
	
	draw_SoundButton.onclick = function () { setDrawButtons (this)};
	draw_PitchButton.onclick = function () { setDrawButtons (this)};
	draw_SpectrogramButton.onclick = function () { setDrawButtons (this)};
	draw_LtasButton.onclick = function () { setDrawButtons (this)};
	draw_IntensityButton.onclick = function () { setDrawButtons (this)};

	// Settings button
	settingsButton.onclick = function () {
		if (localStorage.settingsWindow && settingsWindow) {
			settingsWindow.focus();
		} else {
			if (settingsWindow) settingsWindow.close();
			settingsWindow = window.open('TEVA2_Settings.xml', '_blank');
			localStorage.settingsWindow = "true";
		}
	};
	
	// Global settings
	var teva_settings = {
		recSecs: 4,
		language: "",
		display: "Sound",
		frequency: 2
	};
	
	// Store settings
	function store_TEVA_settings () {
		for (x in teva_settings) {
			localStorage[x] = teva_settings[x];
		};
	};
		
	function load_TEVA_settings () {
		for (x in teva_settings) {
			if (localStorage[x]) teva_settings[x] = localStorage[x];
		};
		
		set_mainpageLanguage (teva_settings.language);
		setDrawButtons (document.getElementById('Draw_'+teva_settings.display+'Button'));
	};
	
	// Initialize to stored settings
	load_TEVA_settings ();

	// Set language (make that selectable)
	if (!teva_settings.language) {
		teva_settings.language = (userLanguage) ? userLanguage : "EN";
	};
	set_mainpageLanguage (teva_settings.language);
	
	// Canvas drawing functions
	var drawingArea = document.getElementById("DrawingArea");
	

	// Set language (make that selectable)
	var language = (userLanguage) ? userLanguage : "EN";
	set_mainpageLanguage (language);

	// Other parameters
	var mediaStream;
	var mediaConstraints = { audio: true, video: false };
	var errorCallback = function(err){console.log("Error: " + err.name);};
	
	var successCallback = function(mediaStream){
		if(!mediaStream){ 
			console.log("No media stream: " + mediaStream);
		}
		
	    record.disabled = false;
	    record.style.color = "red";
		
		var recordRTC = RecordRTC(mediaStream, {
			recorderType: StereoAudioRecorder // optionally force WebAudio API to record audio
			
		}); 
		recordRTC.mimeType = {audio: 'audio/wav'};

		// Play recorded sound
		play.onclick = function() {
			play_soundArray (currentAudioWindow, recordedSampleRate);
		};
		
		// Stop
		stopRecording = function() {
			recordRTC.stopRecording(function(audioURL) { 
				recordingLight.style.color = "gray";
				recordedBlobURL = audioURL;
				recordedBlob = recordRTC.getBlob();
				// Do things with Blob!!!
				processAudio (recordedBlob);
			});
		    play.disabled = false;
		    record.disabled = false;
		    record.style.color = "red";
		    play.style.color = "red";
		    recordingLight.style.color = "gray";
		}
		
		// onClick Start
		record.onclick = function() {
		    play.disabled = true;
		    record.disabled = true;
		    record.style.color = "gray";
		    play.style.color = "gray";
			recordingLight.style.top = "5%";
			recordingLight.style.left = "2%";
			recordingLight.style.fontSize = "15vmin";
		    recordingLight.style.color = "red";
		    
		    // Reset existing parameters
		    initializeExistingAnalysis();
		    
		    recordRTC.initRecorder();
			recordRTC.startRecording();
		    // Set Timeout for stop
		    setTimeout(stopRecording, teva_settings.recSecs * 1000)
		}
	
	};

	if (navigator.mediaDevices.getUserMedia) {
		navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
	} else {
		navigator.webkitGetUserMedia(mediaConstraints, successCallback, errorCallback);
	};


	//]]>	

	</script>
</body>
</html>
